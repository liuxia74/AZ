 if ((post1[stop]<0.1)|(post2[stop]>=0.9)) failure<-failure+1
}
else futile<-futile+1
time[i]<-min(stop,n)
}
success
failure
futile
mean(time)
p<-0.4
n<-30
total.rep<-10000
time<-rep(0,total.rep)
k<-10
success<-0
failure<-0
futile<-0
for(i in 1:total.rep)
{
x<-rbinom(n,1,p)
x<-cumsum(x)
post1<-c(1-pbeta(0.3,1+x,1+(1:n)-x),1)
post1a<-c(1-pbeta(0.3,1+x,1+(1:n)-x),0)
post2<-c(pbeta(0.15,1+x,1+(1:n)-x),1)
stop<-min((k:(n+1))[post1[k:(n+1)]>=0.8][1],(k:(n+1))[post1a[k:(n+1)]<0.1][1],(k:(n+1))[post2[k:(n+1)]>=0.9][1])
if(stop<=n)
{ 
 if (post1[stop]>=0.8) success<-success+1
 if ((post1[stop]<0.1)|(post2[stop]>=0.9)) failure<-failure+1
}
else futile<-futile+1
time[i]<-min(stop,n)
}
success
failure
futile
mean(time)
p<-0.4
n<-30
total.rep<-10000
time<-rep(0,total.rep)
k<-10
success<-0
failure<-0
futile<-0
for(i in 1:total.rep)
{
x<-rbinom(n,1,p)
x<-cumsum(x)
post1<-c(1-pbeta(0.3,1+x,1+(1:n)-x),1)
post1a<-c(1-pbeta(0.3,1+x,1+(1:n)-x),0)
post2<-c(pbeta(0.15,1+x,1+(1:n)-x),1)
stop<-min((k:(n+1))[post1[k:(n+1)]>=0.8][1],(k:(n+1))[post1a[k:(n+1)]<0.1][1],(k:(n+1))[post2[k:(n+1)]>=0.9][1])
if(stop<=n)
{ 
 if (post1[stop]>=0.8) success<-success+1
 if ((post1[stop]<0.1)|(post2[stop]>=0.9)) failure<-failure+1
}
else futile<-futile+1
time[i]<-min(stop,n)
}
success
failure
futile
mean(time)
p<-0.4
n<-30
total.rep<-10000
time<-rep(0,total.rep)
freq<-time
k<-10
success<-0
failure<-0
futile<-0
for(i in 1:total.rep)
{
x<-rbinom(n,1,p)
x<-cumsum(x)
post1<-c(1-pbeta(0.3,1+x,1+(1:n)-x),1)
post1a<-c(1-pbeta(0.3,1+x,1+(1:n)-x),0)
post2<-c(pbeta(0.15,1+x,1+(1:n)-x),1)
stop<-min((k:(n+1))[post1[k:(n+1)]>=0.8][1],(k:(n+1))[post1a[k:(n+1)]<0.1][1],(k:(n+1))[post2[k:(n+1)]>=0.9][1])
if(stop<=n)
{ 
 if (post1[stop]>=0.8) success<-success+1
 if ((post1[stop]<0.1)|(post2[stop]>=0.9)) failure<-failure+1
}
else futile<-futile+1
time[i]<-min(stop,n)
freq[i]<-time[i]/5-1
}
success
failure
futile
mean(time)
table(freq)
p<-0.4
n<-30
total.rep<-10000
time<-rep(0,total.rep)
freq<-time
k<-10
success<-0
failure<-0
futile<-0
for(i in 1:total.rep)
{
x<-rbinom(n,1,p)
x<-cumsum(x)
post1<-c(1-pbeta(0.3,1+x,1+(1:n)-x),1)
post1a<-c(1-pbeta(0.3,1+x,1+(1:n)-x),0)
post2<-c(pbeta(0.15,1+x,1+(1:n)-x),1)
stop<-min((k:(n+1))[post1[k:(n+1)]>=0.8][1],(k:(n+1))[post1a[k:(n+1)]<0.1][1],(k:(n+1))[post2[k:(n+1)]>=0.9][1])
if(stop<=n)
{ 
 if (post1[stop]>=0.8) success<-success+1
 if ((post1[stop]<0.1)|(post2[stop]>=0.9)) failure<-failure+1
}
else futile<-futile+1
time[i]<-min(stop,n)
freq[i]<-floor(time[i]/5)-1
}
success
failure
futile
mean(time)
table(freq)
p<-0.4
n<-30
total.rep<-10000
time<-rep(0,total.rep)
freq<-time
result<-time
k<-10
success<-0
failure<-0
futile<-0
for(i in 1:total.rep)
{
x<-rbinom(n,1,p)
x<-cumsum(x)
post1<-c(1-pbeta(0.3,1+x,1+(1:n)-x),1)
post1a<-c(1-pbeta(0.3,1+x,1+(1:n)-x),0)
post2<-c(pbeta(0.15,1+x,1+(1:n)-x),1)
stop<-min((k:(n+1))[post1[k:(n+1)]>=0.8][1],(k:(n+1))[post1a[k:(n+1)]<0.1][1],(k:(n+1))[post2[k:(n+1)]>=0.9][1])
if(stop<=n)
{ 
 if (post1[stop]>=0.8) {success<-success+1;result[i]<-1}
 if ((post1[stop]<0.1)|(post2[stop]>=0.9)) {failure<-failure+1;result[i]<-3}
}
else {futile<-futile+1;result[i]<-2}
time[i]<-min(stop,n)
freq[i]<-floor(time[i]/5)-1
}
success
failure
futile
mean(time)
table(cbind(freq,result))
table(result)
table(factor(cbind(freq,result)))
table(freq+10*result)
p<-0.4
n<-30
total.rep<-10000
time<-rep(0,total.rep)
freq<-time
result<-time
k<-10
success<-0
failure<-0
futile<-0
for(i in 1:total.rep)
{
x<-rbinom(n,1,p)
x<-cumsum(x)
post1<-c(1-pbeta(0.3,1+x,1+(1:n)-x),1)
post1a<-c(1-pbeta(0.3,1+x,1+(1:n)-x),0)
post2<-c(pbeta(0.15,1+x,1+(1:n)-x),1)
stop<-min((k:(n+1))[post1[k:(n+1)]>=0.8][1],(k:(n+1))[post1a[k:(n+1)]<0.1][1],(k:(n+1))[post2[k:(n+1)]>=0.9][1])
if(stop<=n)
{ 
 if (post1[stop]>=0.8) {success<-success+1;result[i]<-1}
 if ((post1a[stop]<0.1)|(post2[stop]>=0.9)) {failure<-failure+1;result[i]<-3}
}
else {futile<-futile+1;result[i]<-2}
time[i]<-min(stop,n)
freq[i]<-floor(time[i]/5)-1
}
success
failure
futile
mean(time)
table(freq+10*result)
table(freq)
p<-0.4
n<-30
total.rep<-10000
time<-rep(0,total.rep)
freq<-time
result<-time
k<-10
success<-0
failure<-0
futile<-0
for(i in 1:total.rep)
{
x<-rbinom(n,1,p)
x<-cumsum(x)
post1<-c(1-pbeta(0.3,1+x,1+(1:n)-x),1)
post1a<-c(1-pbeta(0.3,1+x,1+(1:n)-x),0)
post2<-c(pbeta(0.15,1+x,1+(1:n)-x),1)
stop<-min((k:(n+1))[post1[k:(n+1)]>=0.8][1],(k:(n+1))[post1a[k:(n+1)]<0.1][1])
if(stop<=n)
{ 
 if (post1[stop]>=0.8) {success<-success+1;result[i]<-1}
 if ((post1a[stop]<0.1)) {failure<-failure+1;result[i]<-3}
}
else {futile<-futile+1;result[i]<-2}
time[i]<-min(stop,n)
freq[i]<-floor(time[i]/5)-1
}
success
failure
futile
mean(time)
table(freq)
table(freq+10*result)
q()
x=0
q()
library(ggplot2)
library(plyr)
## Load data
data_folder <- "../Scenario/data/"
subject <- read.csv(paste(data_folder,"subject.csv", sep=''))
efficacy <- read.csv(paste(data_folder,"efficacy.csv", sep=''))
randomization <- read.csv(paste(data_folder,"randomization.csv", sep=''))
## merge the table
data <- merge(merge(subject, efficacy, by = ("subject")),
 randomization, by = "subject")
## normalize the nosebleeds
data$nosebleeds_per_year <- data$nosebleeds / data$duration * 365
data$y <- ifelse(data$nosebleeds <2, 1, 0)
data$mucus.band <-as.factor(ifelse(data$mucus.viscosity<2, 0, 1))
data <- subset(data, duration > 300)
summary(glm(nosebleeds ~ arm * mucus.viscosity, data=data, family = Poisson))
summary(glm(nosebleeds ~ arm * mucus.viscosity, data=data, family = "Poisson"))
summary(glm(nosebleeds ~ arm * mucus.viscosity, data=data, family = "Poisson"))
?glm
summary(glm(nosebleeds ~ arm * mucus.viscosity, data=data, family = poisson))
summary(rslt <-glm(nosebleeds ~ arm * mucus.viscosity, data=data, family = poisson))
hist(data$mucus.viscosity)
names(rslt)
data$treatment <- ifelse(data$arm == 'ACTIVE', 1, 0)
summary(rslt <-glm(nosebleeds ~ treatment * mucus.viscosity, data=data, family = poisson))
names(summary(rslt))
names(rslt)
summary(rslt)$cov.
summary(rslt)$cov.unscaled
coeff <- mucus_rslt$coefficient
cov_matrix <- summary(rslt)$cov.unscaled
mucus_effect <- coeff[2] + coeff[4] * data$mucus.viscosity
mucus_stder <- sqrt(cov[2,2] + cov[2,4]* data$mucus.viscosity + cov[4,4] * data$mucus.viscosity ^2)
coeff <- mucus_rslt$coefficient
mucus_rslt <- glm(nosebleed ~ treatment * mucus.viscosity, data=data, family = poisson)
mucus_rslt <- glm(nosebleeds ~ treatment * mucus.viscosity, data=data, family = poisson)
coeff <- mucus_rslt$coefficient
cov_matrix <- summary(mucus_rslt)$cov.unscaled
mucus_effect <- coeff[2] + coeff[4] * data$mucus.viscosity
mucus_stder <- sqrt(cov[2,2] + cov[2,4]* data$mucus.viscosity + cov[4,4] * data$mucus.viscosity ^2)
mucus_stder <- sqrt(cov_matrix[2,2] + cov_matrix[2,4]* data$mucus.viscosity + cov_matrix[4,4] * data$mucus.viscosity ^2)
mucus_effect
mucus_stder <- sqrt(cov_matrix[2,2] + cov_matrix[2,4]* data$mucus.viscosity + cov_matrix[4,4] * data$mucus.viscosity ^2)
mucus_stder
plot(data$mucus.viscosity ~ mucus_effect)
plot(data$mucus.viscosity , mucus_effect)
points(data$mucus.viscosity , mucus_effect + mucus_stder * 1.96 )
points(data$mucus.viscosity , mucus_effect - mucus_stder * 1.96 )
summary(rslt)
mucus_zscore <- mucus_effect / mucus_stder
mucus_p_value <- 2 * pnorm(abs(mucus_zscore), 0, 1)
mucus_p_value
mucus_p_value <- 2 *(1- pnorm(abs(mucus_zscore), 0, 1))
mucus_p_value
mucus_output <- data.frame(mucus.viscosity = data$mucis.viscosity, mucus_p_value = mucus_p_value)
length(mucus_p_value)
dim(data)
mucus_output <- data.frame(mucus.viscosity = data$mucus.viscosity, mucus_p_value = mucus_p_value)
ploy(mucus_p_value ~ mucus.viscosity, data=mucus_output)
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output)
abline(,05, 0)
abline(.05, 0)
summary(rslt)
rslt1 <- glm(nosebleeds ~ treatment * log(mucus.viscosity), data=data, family = poisson)
rslt1 <- glm(nosebleeds ~ treatment * log(mucus.viscosity+.1), data=data, family = poisson)
rslt1
mucus_rslt
summary(mucus_rslt)
summary(mucus_rslt)$cov.unscaled
summary(mucus_rslt)$cov.unscaled[c(2,4), c(2,4)]
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, lty = 'l')
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output
)
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, xlab = 'mucus viscosity', ylab = p_vlaue)
abline(0.05, 0, col = 2)
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, xlab = 'mucus viscosity', ylab = 'p_vlaue')
abline(0.05, 0, col = 2)
subset(mucus.output, mucus_p_value < .06 & mucus_p_value >.04)
subset(mucus_output, mucus_p_value < .06 & mucus_p_value >.04)
subset(mucus_output, mucus_p_value < .06 & mucus_p_value >.04)
range(data$mucus.viscosity)
range(data$mucus.viscosity,na.rm=T)
mucus.viscosity = seq(0,6.5, by = .1)
mucus.viscosity = seq(0,6.5, by = .1)
mucus_effect <- coeff[2] + coeff[4] *  mucus.viscosity
mucus_stder <- sqrt(cov_matrix[2,2] + cov_matrix[2,4]*  mucus.viscosity + cov_matrix[4,4] *  mucus.viscosity ^2)
mucus_zscore <- mucus_effect / mucus_stder
## One side p_value P( z > |mucus_zscore| )
mucus_p_value <- 2 *(1- pnorm(abs(mucus_zscore), 0, 1))
## cutoff of mucus viscosity 
mucus_output <- data.frame(mucus.viscosity =  mucus.viscosity, mucus_p_value = mucus_p_value)
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, xlab = 'mucus viscosity', ylab = 'p_vlaue')
abline(0.05, 0, col = 2)
mucus.output
mucus_output
mucus.viscosity = seq(0,6.5, by = .05)
mucus_effect <- coeff[2] + coeff[4] *  mucus.viscosity
mucus_stder <- sqrt(cov_matrix[2,2] + cov_matrix[2,4]*  mucus.viscosity + cov_matrix[4,4] *  mucus.viscosity ^2)
mucus_zscore <- mucus_effect / mucus_stder
## One side p_value P( z > |mucus_zscore| )
mucus_p_value <- 2 *(1- pnorm(abs(mucus_zscore), 0, 1))
## cutoff of mucus viscosity 
mucus_output <- data.frame(mucus.viscosity =  mucus.viscosity, mucus_p_value = mucus_p_value)
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, xlab = 'mucus viscosity', ylab = 'p_vlaue')
abline(0.05, 0, col = 2)
mucus_output
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, xlab = 'mucus viscosity', ylab = 'p_vlaue', type = 'pl')
abline(0.05, 0, col = 2)
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, xlab = 'mucus viscosity', ylab = 'p_vlaue')
abline(0.05, 0, col = 2)
mucus_stder <- sqrt(cov_matrix[2,2] + 2 * cov_matrix[2,4]*  mucus.viscosity + cov_matrix[4,4] *  mucus.viscosity ^2)
mucus_zscore <- mucus_effect / mucus_stder
## One side p_value P( z > |mucus_zscore| )
mucus_p_value <- 2 *(1- pnorm(abs(mucus_zscore), 0, 1))
## cutoff of mucus viscosity 
mucus_output <- data.frame(mucus.viscosity =  mucus.viscosity, mucus_p_value = mucus_p_value)
plot(mucus_p_value ~ mucus.viscosity, data=mucus_output, xlab = 'mucus viscosity', ylab = 'p_vlaue')
abline(0.05, 0, col = 2)
mucus_output
tissue_rslt <- glm(nosebleeds ~ treatment * tissue.use, data=data, family = poisson)
summary(tissue_rslt)
data$tissue <- ifelse(data$tissue.use == 'HIGH', 1, 0)
tissue_rslt <- glm(nosebleeds ~ treatment * tissue, data=data, family = poisson)
summary(tissue_rslt)
overall_rslt <- glm(nosebleeds ~ treatment , data=data, family = poisson)
summary(overall_rslt)
summary(mucus_rslt)
mucus_p_value
data[1,]
summary(glm(nosebleeds ~ treatment *(mucus.viscosity + previous.year),data=data, family = poisson))
summary(glm(previous.year ~ tissue.use,data=data))
summary(glm(nosebleeds ~ treatment *(mucus.viscosity + previous.year + country ),data=data, family = poisson))
data[1,]
summary(glm(nosebleeds ~ treatment *(mucus.viscosity + previous.year + country + eye.colour),data=data, family = poisson))
summary(glm(nosebleeds ~ treatment *(mucus.viscosity),data=data, family = poisson))
install.packages("glmnet")
library(glmnet)
?glmnet
summary(glm(nosebleeds ~ treatment *(mucus.viscosity + as.factor(previous.year) + country + eye.colour),data=data, family = poisson))
summary(glm(nosebleeds ~ treatment *(mucus.viscosity + as.factor(previous.year) + country),data=data, family = poisson))
summary(glm(nosebleeds ~ treatment *(mucus.viscosity + tissue.use + country),data=data, family = poisson))
X <- model.matrix(~ treatment *(mucus.viscosity + tissue.use + prevoius.year+ country),data=data)
X <- model.matrix(~ treatment *(mucus.viscosity + tissue.use + previous.year+ country),data=data)
X[1,]
glmnet_rslt <- glmnet(X=X, y = data$nosebleeds, family = poisson)
library(glmnet)
?glmnet
glmnet_rslt <- glmnet(x=X, y = data$nosebleeds, family = poisson)
sum(is.na(x))
sum(is.na(X))
glmnet_rslt <- glmnet(x=X, y = data$nosebleeds, family = "poisson")
dim(X)
data <- na.omit(data)
full_rslt <- glm(nosebleeds ~ treatment *(mucus.viscosity + tissue.use + previous.year+ country),data=data, family = poisson)
X <- model.matrix(~ treatment *(mucus.viscosity + tissue.use + previous.year+ country),data=data)
glmnet_rslt <- glmnet(x=X, y = data$nosebleeds, family = 'poisson')
glmnet_rslt
names(glmnet_rslt)
summary(glmnet_rslt)
glmnet_rslt$lambda
glmnet_rslt <- cv.glmnet(x=X, y = data$nosebleeds, family = 'poisson')
names(glmnet_rslt)
glmnet_rslt$lambda.1se
glmnet_rslt$lambda.min
coef(glmnet_rslt, s = 'lambda.1se')
coef(glmnet_rslt, s = 'lambda.min')
names(coef(glmnet_rslt, s = 'lambda.min'))
rownames(coef(glmnet_rslt, s = 'lambda.min'))
rownames(coef(glmnet_rslt, s = 'lambda.1se')[coef(glmnet_rslt, s = 'lambda.1se') !=0])
coef(glmnet_rslt, s = 'lambda.1se') !=0
rownames(coef(glmnet_rslt, s = 'lambda.1se')[which(coef(glmnet_rslt, s = 'lambda.1se') !=0)])
rownames(coef(glmnet_rslt, s = 'lambda.1se')[which(coef(glmnet_rslt, s = 'lambda.1se') != '.')])
rownames(coef(glmnet_rslt, s = 'lambda.1se')[which(coef(glmnet_rslt, s = 'lambda.1se') != '.')])names(
names(X)
X[1,]
glmnet_rslt <- cv.glmnet(x=X, y = data$nosebleeds, intercept=FALSE, family = 'poisson')
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X, y = data$nosebleeds, intercept=False, family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X, y = data$nosebleeds, intercept=False, family = 'poisson')
glmnet_rslt <- cv.glmnet(x=X, y = data$nosebleeds, intercept=FALSE, family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X, y = data$nosebleeds, intercept=FALSE, family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds,   family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds,   family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds,   family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds, alpha = .5,  family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds, alpha = c(.5, 0),  family = 'poisson')
q()
dim(data)
summary(data)
data <- merge(merge(subject, efficacy, by = ("subject")),
 randomization, by = "subject")
## normalize the nosebleeds
data$nosebleeds_per_year <- data$nosebleeds / data$duration * 365
data$y <- ifelse(data$nosebleeds <2, 1, 0)
data$treatment <- ifelse(data$arm == 'ACTIVE', 1, 0)
data$mucus.band <-as.factor(ifelse(data$mucus.viscosity<2, 0, 1))
## Only keep those patients with duration > 300 days
## reduce the sample size from 444 to 398
data <- subset(data, duration > 300)
dim(data)
sum(is.na(data))
colSums(is.na(data))
data <- subset(data, duration > 300 & !is.na(mucus.viscosity))
dim(data)
summary(data)
table(data$country)
sd(data)
sd(data[,-1])
apply(data, 2, sd)
summary(tissue_rslt)
tissue_rslt <- glm(nosebleeds ~ treatment * tissue.use, data=data, family = poisson)
tissue_rslt
summary(tissue_rslt)
X <- model.matrix(~ treatment *(mucus.viscosity + tissue.use + previous.year+ country + eye.colour),data=data)
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds, alpha = c(.5, 0),  family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
library(glmnet)
full_rslt <- glm(nosebleeds ~ treatment *(mucus.viscosity + tissue.use + previous.year+ country + eye.colour),data=data, family = poisson)
X <- model.matrix(~ treatment *(mucus.viscosity + tissue.use + previous.year+ country + eye.colour),data=data)
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds, alpha = c(.5, 0),  family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds,  family = 'poisson')
## variables selected using lambda.1se
 coef(glmnet_rslt, s = 'lambda.1se') 
X <- model.matrix(~ treatment *(mucus.viscosity + tissue.use + previous.year+ country + eye.colour),data=data)
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds,  family = 'poisson')
dim(X)
dim(data)
data$eye.colour[is.na(data$eye.colour)] <-"Unavailable"
data$eye.colour <- as.character(data$eye.colour)
data$eye.colour[is.na(data$eye.colour)] <-"Unavailable"
data$eye.colour <- as.factor(data$eye.colour)
X <- model.matrix(~ treatment *(mucus.viscosity + tissue.use + previous.year+ country + eye.colour),data=data)
glmnet_rslt <- cv.glmnet(x=X[,-1], y = data$nosebleeds,  family = 'poisson')
 coef(glmnet_rslt, s = 'lambda.1se') 
glmnet_rslt5 <- cv.glmnet(x=X[,-1], y = data$nosebleeds, alpha=.5, family = 'poisson')
glmnet_rslt5$cv
names(glmnet_rslt5)
 coef(glmnet_rslt5, s = 'lambda.1se') 
glmnet_rslt$lambda.1se
glmnet_rslt
which.min(glmnet_rslt$cvup)
which.min(glmnet_rslt$cvlo)
 coef(glmnet_rslt5, s = 'lambda.min') 
which.min(glmnet_rslt$cvsd)
install.packages("carat")
install.packages("caret")
library(caret)
install.packages("pbkrtest")
install.packages("caret")
library(caret)
install.packages("pbkrtest")
min(glmnet_rslt$cvm)
min(glmnet_rslt5$cvm)
 coef(glmnet_rslt5, s = 'lambda.min') 
 coef(glmnet_rslt, s = 'lambda.min') 
 glmnet_rslt$cvm[which(glmnet_rslt$lambda == glmnet_rslt$lambda.1se)]
 glmnet_rslt5$cvm[which(glmnet_rslt5$lambda == glmnet_rslt5$lambda.1se)]
coef(glmnet_rslt, s = 'lambda.1se') 
subset(data, mucus.viscosity > 1.2 & tissue.use == 'Medium')
subset(data, mucus.viscosity > 1.2 | tissue.use == 'Medium')
dim(subset(data, mucus.viscosity > 1.2 | tissue.use == 'Medium'))
dist_prev <- table(data$previous.year)/nrow(data)
dist_prev
q()
